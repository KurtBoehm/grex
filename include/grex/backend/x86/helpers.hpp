// This file is part of https://github.com/KurtBoehm/grex.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#ifndef INCLUDE_GREX_BACKEND_X86_HELPERS_HPP
#define INCLUDE_GREX_BACKEND_X86_HELPERS_HPP

#include <boost/preprocessor.hpp>

#include "grex/backend/x86/instruction-sets.hpp"

#define GREX_NOOP GREX_KINDCAST_DUMMY
#define GREX_IDENTITY(X) X
#define GREX_APPLY(MACRO, ...) MACRO(__VA_ARGS__)

#define GREX_FP_LETTER_f32 s
#define GREX_FP_LETTER_f64 d
#define GREX_FP_LETTER(TYPE) GREX_FP_LETTER_##TYPE
#define GREX_FP_SUFFIX(TYPE) BOOST_PP_CAT(p, GREX_FP_LETTER_##TYPE)

#define GREX_SI_SUFFIX_f(BITS, REGISTERBITS) GREX_FP_SUFFIX(f##BITS)
#define GREX_SI_SUFFIX_i(BITS, REGISTERBITS) si##REGISTERBITS
#define GREX_SI_SUFFIX_u(BITS, REGISTERBITS) si##REGISTERBITS
#define GREX_SI_SUFFIX(KIND, BITS, REGISTERBITS) GREX_SI_SUFFIX_##KIND(BITS, REGISTERBITS)

#define GREX_EPI_SUFFIX_f(BITS) GREX_FP_SUFFIX(f##BITS)
#define GREX_EPI_SUFFIX_i(BITS) epi##BITS
#define GREX_EPI_SUFFIX_u(BITS) epi##BITS
#define GREX_EPI_SUFFIX(KIND, BITS) GREX_EPI_SUFFIX_##KIND(BITS)

#define GREX_EPU_SUFFIX_f(BITS) GREX_FP_SUFFIX(f##BITS)
#define GREX_EPU_SUFFIX_i(BITS) epi##BITS
#define GREX_EPU_SUFFIX_u(BITS) epu##BITS
#define GREX_EPU_SUFFIX(KIND, BITS) GREX_EPU_SUFFIX_##KIND(BITS)

#define GREX_EPI8_SUFFIX_f(BITS) GREX_FP_SUFFIX(f##BITS)
#define GREX_EPI8_SUFFIX_i(BITS) epi8
#define GREX_EPI8_SUFFIX_u(BITS) epi8
#define GREX_EPI8_SUFFIX(KIND, BITS) GREX_EPI8_SUFFIX_##KIND(BITS)

#define GREX_ELEMENTS_128_8 16
#define GREX_ELEMENTS_128_16 8
#define GREX_ELEMENTS_128_32 4
#define GREX_ELEMENTS_128_64 2
#define GREX_ELEMENTS_256_8 32
#define GREX_ELEMENTS_256_16 16
#define GREX_ELEMENTS_256_32 8
#define GREX_ELEMENTS_256_64 4
#define GREX_ELEMENTS_512_8 64
#define GREX_ELEMENTS_512_16 32
#define GREX_ELEMENTS_512_32 16
#define GREX_ELEMENTS_512_64 8
#define GREX_ELEMENTS(REGISTERBITS, ELEMENTBITS) GREX_ELEMENTS_##REGISTERBITS##_##ELEMENTBITS

#define GREX_BITPREFIX_128 _mm
#define GREX_BITPREFIX_256 _mm256
#define GREX_BITPREFIX_512 _mm512
#define GREX_BITPREFIX(REGISTERBITS) GREX_BITPREFIX_##REGISTERBITS

#define GREX_BITREGISTERPREFIX_128 __m128
#define GREX_BITREGISTERPREFIX_256 __m256
#define GREX_BITREGISTERPREFIX_512 __m512
#define GREX_BITREGISTERPREFIX(BITS) GREX_BITREGISTERPREFIX_##BITS

#define GREX_TYPEREGISTERSUFFIX_f32
#define GREX_TYPEREGISTERSUFFIX_f64 d
#define GREX_TYPEREGISTERSUFFIX_f(BITS) GREX_TYPEREGISTERSUFFIX_f##BITS
#define GREX_TYPEREGISTERSUFFIX_i(BITS) i
#define GREX_TYPEREGISTERSUFFIX_u(BITS) i
#define GREX_TYPEREGISTERSUFFIX(KIND, BITS) GREX_TYPEREGISTERSUFFIX_##KIND(BITS)

#define GREX_KINDCAST_IMPL(FROMKIND, TOKIND, BITS, REGISTERBITS, X) \
  BOOST_PP_CAT(BOOST_PP_CAT(GREX_BITPREFIX(REGISTERBITS), \
                            BOOST_PP_CAT(_cast, GREX_SI_SUFFIX(FROMKIND, BITS, REGISTERBITS))), \
               BOOST_PP_CAT(_, GREX_SI_SUFFIX(TOKIND, BITS, REGISTERBITS)))(X)
#define GREX_KINDCAST_DUMMY(FROMKIND, TOKIND, BITS, REGISTERBITS, X) X
#define GREX_KINDCAST_ff GREX_KINDCAST_DUMMY
#define GREX_KINDCAST_fi GREX_KINDCAST_IMPL
#define GREX_KINDCAST_fu GREX_KINDCAST_IMPL
#define GREX_KINDCAST_if GREX_KINDCAST_IMPL
#define GREX_KINDCAST_ii GREX_KINDCAST_DUMMY
#define GREX_KINDCAST_iu GREX_KINDCAST_DUMMY
#define GREX_KINDCAST_uf GREX_KINDCAST_IMPL
#define GREX_KINDCAST_ui GREX_KINDCAST_DUMMY
#define GREX_KINDCAST_uu GREX_KINDCAST_DUMMY
#define GREX_KINDCAST(FROMKIND, TOKIND, BITS, REGISTERBITS, X) \
  GREX_KINDCAST_##FROMKIND##TOKIND(FROMKIND, TOKIND, BITS, REGISTERBITS, X)

#define GREX_BROADMASK_CONVERT_f(BITS, REGISTERBITS, X) \
  BOOST_PP_CAT(BOOST_PP_CAT(GREX_BITPREFIX(REGISTERBITS), _castsi##REGISTERBITS##_), \
               GREX_FP_SUFFIX(f##BITS))(X)
#define GREX_BROADMASK_CONVERT_i(BITS, REGISTERBITS, X) X
#define GREX_BROADMASK_CONVERT_u(BITS, REGISTERBITS, X) X
#define GREX_BROADMASK_CONVERT(KIND, BITS, REGISTERBITS, X) \
  GREX_BROADMASK_CONVERT_##KIND(BITS, REGISTERBITS, X)

#define GREX_REGISTER(KIND, BITS, REGISTERBITS) \
  BOOST_PP_CAT(GREX_BITREGISTERPREFIX(REGISTERBITS), GREX_TYPEREGISTERSUFFIX(KIND, BITS))

#define GREX_MMASKSIZE_2 8
#define GREX_MMASKSIZE_4 8
#define GREX_MMASKSIZE_8 8
#define GREX_MMASKSIZE_16 16
#define GREX_MMASKSIZE_32 32
#define GREX_MMASKSIZE_64 64
#define GREX_MMASKSIZE(SIZE) GREX_MMASKSIZE_##SIZE

#define GREX_SIZEMMASK_IMPLI(MMASKSIZE) __mmask##MMASKSIZE
#define GREX_SIZEMMASK_IMPL(MMASKSIZE) GREX_SIZEMMASK_IMPLI(MMASKSIZE)
#define GREX_SIZEMMASK(SIZE) GREX_SIZEMMASK_IMPL(GREX_MMASKSIZE(SIZE))

#define GREX_FOREACH_FP_TYPE(MACRO, REGISTERBITS, ...) \
  MACRO(f, 32, GREX_ELEMENTS(REGISTERBITS, 32) __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(f, 64, GREX_ELEMENTS(REGISTERBITS, 64) __VA_OPT__(, ) __VA_ARGS__)

#define GREX_FOREACH_INT_TYPE_BASE(MACRO, KIND, REGISTERBITS, ...) \
  MACRO(KIND, 8, GREX_ELEMENTS(REGISTERBITS, 8) __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(KIND, 16, GREX_ELEMENTS(REGISTERBITS, 16) __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(KIND, 32, GREX_ELEMENTS(REGISTERBITS, 32) __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(KIND, 64, GREX_ELEMENTS(REGISTERBITS, 64) __VA_OPT__(, ) __VA_ARGS__)
#define GREX_FOREACH_UINT_TYPE(MACRO, REGISTERBITS, ...) \
  GREX_FOREACH_INT_TYPE_BASE(MACRO, u, REGISTERBITS, __VA_ARGS__)
#define GREX_FOREACH_SINT_TYPE(MACRO, REGISTERBITS, ...) \
  GREX_FOREACH_INT_TYPE_BASE(MACRO, i, REGISTERBITS, __VA_ARGS__)

#define GREX_FOREACH_INT_TYPE(MACRO, REGISTERBITS, ...) \
  GREX_FOREACH_UINT_TYPE(MACRO, REGISTERBITS __VA_OPT__(, ) __VA_ARGS__) \
  GREX_FOREACH_SINT_TYPE(MACRO, REGISTERBITS __VA_OPT__(, ) __VA_ARGS__)

#define GREX_FOREACH_TYPE(MACRO, REGISTERBITS, ...) \
  GREX_FOREACH_FP_TYPE(MACRO, REGISTERBITS __VA_OPT__(, ) __VA_ARGS__) \
  GREX_FOREACH_INT_TYPE(MACRO, REGISTERBITS __VA_OPT__(, ) __VA_ARGS__)

#if GREX_X86_64_LEVEL >= 4
#define GREX_FOREACH_X86_64_LEVEL(MACRO, ...) \
  MACRO(128, _mm __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(256, _mm256 __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(512, _mm512 __VA_OPT__(, ) __VA_ARGS__)
#elif GREX_X86_64_LEVEL >= 3
#define GREX_FOREACH_X86_64_LEVEL(MACRO, ...) \
  MACRO(128, _mm __VA_OPT__(, ) __VA_ARGS__) \
  MACRO(256, _mm256 __VA_OPT__(, ) __VA_ARGS__)
#else
#define GREX_FOREACH_X86_64_LEVEL(MACRO, ...) MACRO(128, _mm __VA_OPT__(, ) __VA_ARGS__)
#endif

#endif // INCLUDE_GREX_BACKEND_X86_HELPERS_HPP
