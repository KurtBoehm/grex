// This file is part of https://github.com/KurtBoehm/grex.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#ifndef INCLUDE_GREX_BACKEND_X86_OPERATIONS_CONVERT_BASE_HPP
#define INCLUDE_GREX_BACKEND_X86_OPERATIONS_CONVERT_BASE_HPP

#include "grex/backend/x86/helpers.hpp"

// Conversion intrinsics
#define GREX_CVT_INTRINSIC_EPUI(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  return GREX_VECTOR_TYPE(DSTKIND, DSTBITS, \
                          SIZE){GREX_CAT(BITPREFIX##_cvt, GREX_EPU_SUFFIX(SRCKIND, SRCBITS), _, \
                                         GREX_EPI_SUFFIX(DSTKIND, DSTBITS))(v.registr())};
#define GREX_CVT_INTRINSIC_EPU(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  return GREX_VECTOR_TYPE(DSTKIND, DSTBITS, \
                          SIZE){GREX_CAT(BITPREFIX##_cvt, GREX_EPU_SUFFIX(SRCKIND, SRCBITS), _, \
                                         GREX_EPU_SUFFIX(DSTKIND, DSTBITS))(v.registr())};
#define GREX_CVT_INTRINSIC_EPI(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  return GREX_VECTOR_TYPE(DSTKIND, DSTBITS, \
                          SIZE){GREX_CAT(BITPREFIX##_cvt, GREX_EPI_SUFFIX(SRCKIND, SRCBITS), _, \
                                         GREX_EPI_SUFFIX(DSTKIND, DSTBITS))(v.registr())};

#define GREX_CVTT_INTRINSIC_EPU(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  return GREX_VECTOR_TYPE(DSTKIND, DSTBITS, \
                          SIZE){GREX_CAT(BITPREFIX##_cvtt, GREX_EPU_SUFFIX(SRCKIND, SRCBITS), _, \
                                         GREX_EPU_SUFFIX(DSTKIND, DSTBITS))(v.registr())};

// Floating-point → integer with less than 32 bits: Convert to i32 and go from there
#define GREX_CVT_IMPL_F2SMALLI(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  const auto vi32 = convert(v, type_tag<i32>).registr(); \
  return convert(GREX_VECTOR_TYPE(i, 32, SIZE){vi32}, type_tag<DSTKIND##DSTBITS>);

// Integer with less than 32 bits → floating-point: Convert to i32 and go from there
#define GREX_CVT_IMPL_SMALLI2F(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  const GREX_VECTOR_TYPE(SRCKIND, SRCBITS, GREX_MAX(SIZE, 4)) full{v.registr()}; \
  const auto vi32 = convert(full, type_tag<i32>).r; \
  return convert(GREX_VECTOR_TYPE(i, 32, SIZE){vi32}, type_tag<DSTKIND##DSTBITS>);

// Base macros
#define GREX_CVT_IMPL(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  GREX_CVT_IMPL_##DSTKIND##DSTBITS##_##SRCKIND##SRCBITS##_##SIZE( \
    DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS)
#define GREX_CVT(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  inline GREX_VECTOR_TYPE(DSTKIND, DSTBITS, SIZE) \
    convert(GREX_VECTOR_TYPE(SRCKIND, SRCBITS, SIZE) v, TypeTag<DSTKIND##DSTBITS>) { \
    GREX_CVT_IMPL(DSTKIND, DSTBITS, SRCKIND, SRCBITS, SIZE, BITPREFIX, REGISTERBITS) \
  }

#define GREX_CVT_DEF_ALL(BITPREFIX, REGISTERBITS) \
  /* Double integer size */ \
  GREX_CVT(i, 16, i, 8, GREX_ELEMENTS(REGISTERBITS, 16), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 16, u, 8, GREX_ELEMENTS(REGISTERBITS, 16), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 32, i, 16, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 32, u, 16, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 64, i, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 64, u, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Quadruple size */ \
  GREX_CVT(i, 32, i, 8, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 32, u, 8, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 64, i, 16, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 64, u, 16, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Octuple size */ \
  GREX_CVT(i, 64, i, 8, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 64, u, 8, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Halve integer size */ \
  GREX_CVT(u, 8, u, 16, GREX_ELEMENTS(REGISTERBITS, 16), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 16, u, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 32, u, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Quarter integer size */ \
  GREX_CVT(u, 8, u, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 16, u, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Divide integer size by eight */ \
  GREX_CVT(u, 8, u, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Floating-point conversions */ \
  GREX_CVT(f, 64, f, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* Integer → floating-point */ \
  /* f64 */ \
  GREX_CVT(f, 64, i, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, u, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, i, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, u, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, i, 16, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, u, 16, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, i, 8, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 64, u, 8, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* f32 */ \
  GREX_CVT(f, 32, i, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, u, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, i, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, u, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, i, 16, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, u, 16, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, i, 8, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(f, 32, u, 8, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  /* Floating-point → integer */ \
  /* f64 */ \
  GREX_CVT(i, 64, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 64, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 32, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 32, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 16, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 16, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 8, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 8, f, 64, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  /* f32 */ \
  GREX_CVT(i, 64, f, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 64, f, 32, GREX_ELEMENTS(REGISTERBITS, 64), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 32, f, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 32, f, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 16, f, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 16, f, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(i, 8, f, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS) \
  GREX_CVT(u, 8, f, 32, GREX_ELEMENTS(REGISTERBITS, 32), BITPREFIX, REGISTERBITS)

#endif // INCLUDE_GREX_BACKEND_X86_OPERATIONS_CONVERT_BASE_HPP
