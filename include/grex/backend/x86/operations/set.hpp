// This file is part of https://github.com/KurtBoehm/grex.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#ifndef INCLUDE_GREX_BACKEND_X86_OPERATIONS_SET_HPP
#define INCLUDE_GREX_BACKEND_X86_OPERATIONS_SET_HPP

#include <immintrin.h>

#include "thesauros/types.hpp"

#include "grex/backend/x86/instruction-sets.hpp"
#include "grex/backend/x86/operations/helpers.hpp"
#include "grex/backend/x86/types.hpp"
#include "grex/base/defs.hpp"

namespace grex::backend {
#define GREX_DEF_ZERO(ELEMENT, SIZE, PREFIX, SUFFIX) \
  inline Vector<ELEMENT, SIZE> zero(thes::TypeTag<ELEMENT>, thes::IndexTag<SIZE>) { \
    return {_##PREFIX##_setzero_##SUFFIX()}; \
  }
#define GREX_DEF_SET_ARG(CNT, IDX, TYPE) BOOST_PP_COMMA_IF(IDX) TYPE v##IDX
#define GREX_DEF_SET_VAL_IMPL(IDX) v##IDX
#define GREX_DEF_SET_VAL(CNT, IDX, SIZE) \
  BOOST_PP_COMMA_IF(IDX) GREX_APPLY(GREX_DEF_SET_VAL_IMPL, BOOST_PP_SUB(SIZE, BOOST_PP_INC(IDX)))
#define GREX_DEF_SET_IMPL(ELEMENT, SIZE, PREFIX, SUFFIX, ARGS, VALS) \
  inline Vector<ELEMENT, SIZE> set(ARGS) { \
    return {_##PREFIX##_set_##SUFFIX(VALS)}; \
  }
#define GREX_DEF_GSET(ELEMENT, SIZE, PREFIX, SUFFIX) \
  inline Vector<ELEMENT, SIZE> broadcast(ELEMENT value, thes::IndexTag<SIZE>) { \
    return {_##PREFIX##_set1_##SUFFIX(value)}; \
  } \
  GREX_DEF_SET_IMPL(ELEMENT, SIZE, PREFIX, SUFFIX, \
                    BOOST_PP_REPEAT(SIZE, GREX_DEF_SET_ARG, ELEMENT), \
                    BOOST_PP_REPEAT(SIZE, GREX_DEF_SET_VAL, SIZE))
#define GREX_DEF_SET_INT(KIND, BITS, SIZE, PREFIX) GREX_DEF_SET(KIND##BITS, SIZE, PREFIX, epi##BITS)

#define GREX_DEF_SSET_FP_IMPL(ELEMENT, SIZE, PREFIX, SUFFIX) \
  GREX_DEF_ZERO(ELEMENT, SIZE, PREFIX, SUFFIX) \
  GREX_DEF_GSET(ELEMENT, SIZE, PREFIX, SUFFIX)
#define GREX_DEF_SSET_FP(REGISTERBITS, PREFIX) \
  GREX_DEF_SSET_FP_IMPL(f32, GREX_ELEMENTS(REGISTERBITS, 32), PREFIX, ps) \
  GREX_DEF_SSET_FP_IMPL(f64, GREX_ELEMENTS(REGISTERBITS, 64), PREFIX, pd)
#define GREX_DEF_SSET_INT(REGISTERBITS, PREFIX, SUFFIX64) \
  GREX_DEFINE_SI_OPERATION(GREX_DEF_ZERO, REGISTERBITS, PREFIX, si##REGISTERBITS) \
  GREX_DEF_GSET(u8, GREX_ELEMENTS(REGISTERBITS, 8), PREFIX, epi8) \
  GREX_DEF_GSET(i8, GREX_ELEMENTS(REGISTERBITS, 8), PREFIX, epi8) \
  GREX_DEF_GSET(u16, GREX_ELEMENTS(REGISTERBITS, 16), PREFIX, epi16) \
  GREX_DEF_GSET(i16, GREX_ELEMENTS(REGISTERBITS, 16), PREFIX, epi16) \
  GREX_DEF_GSET(u32, GREX_ELEMENTS(REGISTERBITS, 32), PREFIX, epi32) \
  GREX_DEF_GSET(i32, GREX_ELEMENTS(REGISTERBITS, 32), PREFIX, epi32) \
  GREX_DEF_GSET(u64, GREX_ELEMENTS(REGISTERBITS, 64), PREFIX, epi64##SUFFIX64) \
  GREX_DEF_GSET(i64, GREX_ELEMENTS(REGISTERBITS, 64), PREFIX, epi64##SUFFIX64)

GREX_DEF_SSET_FP(128, mm)
GREX_DEF_SSET_INT(128, mm, x)
#if GREX_INSTRUCTION_SET >= GREX_AVX
GREX_DEF_SSET_FP(256, mm256)
#endif
#if GREX_INSTRUCTION_SET >= GREX_AVX2
GREX_DEF_SSET_INT(256, mm256, x)
#endif
#if GREX_INSTRUCTION_SET >= GREX_AVX512_1
GREX_DEF_SSET_FP(512, mm512)
#endif
#if GREX_INSTRUCTION_SET >= GREX_AVX512_2
GREX_DEF_SSET_INT(512, mm512, )
#endif

#undef GREX_DEF_ZERO
#undef GREX_DEF_GSET
#undef GREX_DEF_SSET_FP
#undef GREX_DEF_SSET_INT
#undef GREX_DEF_SET_ARG
#undef GREX_DEF_SET
} // namespace grex::backend

#endif // INCLUDE_GREX_BACKEND_X86_OPERATIONS_SET_HPP
